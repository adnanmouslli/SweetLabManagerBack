generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  roles     Role[]   @default([EMPLOYEE])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shifts   Shift[]
  invoices Invoice[]

  fundTransfers FundTransferLog[]
}

enum Role {
  MANAGER
  ADMIN
  EMPLOYEE
}

model Shift {
  id         Int         @id @default(autoincrement())
  shiftType  ShiftType
  status     ShiftStatus @default(open)
  openTime   DateTime
  closeTime  DateTime?
  
  differenceStatus DifferenceStatus? 
  differenceValue  Float?            

  employeeId Int
  employee   User      @relation(fields: [employeeId], references: [id])
  invoices   Invoice[]

  @@map("shifts")
}

enum DifferenceStatus {
  surplus  // زيادة
  deficit  // نقصان
}


enum ShiftType {
  morning
  evening
}

enum ShiftStatus {
  open
  closed
}

model Fund {
  id             Int      @id @default(autoincrement())
  fundType       FundType
  currentBalance Float    @default(0)
  lastUpdate     DateTime @updatedAt

  invoices Invoice[]

  transfersFrom FundTransferLog[] @relation("FromFund")
  transfersTo   FundTransferLog[] @relation("ToFund")

  @@map("funds")
}

enum FundType {
  main
  general
  booth
  university
}

model FundTransferLog {
  id              Int      @id @default(autoincrement())
  amount          Float
  fromFundId      Int
  toFundId        Int
  transferredById Int
  transferredAt   DateTime @default(now())

  fromFund      Fund @relation("FromFund", fields: [fromFundId], references: [id])
  toFund        Fund @relation("ToFund", fields: [toFundId], references: [id])
  transferredBy User @relation(fields: [transferredById], references: [id])

  @@map("fund_transfer_logs")
}

model ItemGroup {
  id          Int      @id @default(autoincrement())
  name        String
  type        ItemType
  description String?

  items Item[]

  @@map("item_groups")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  type        ItemType
  unit        String
  price       Float
  description String?

  groupId Int
  group   ItemGroup @relation(fields: [groupId], references: [id])

  invoiceItems InvoiceItem[]

  @@map("items")
}

enum ItemType {
  production
  raw
}

model Invoice {
  id              Int             @id @default(autoincrement())
  invoiceNumber   String          @unique
  invoiceType     InvoiceType
  invoiceCategory InvoiceCategory
  customerId      Int?
  customer        Customer?       @relation(fields: [customerId], references: [id])
  totalAmount     Float
  discount        Float           @default(0)
  paidStatus      Boolean
  paymentDate     DateTime?
  createdAt       DateTime        @default(now())
  notes           String?

  fundId Int
  fund   Fund @relation(fields: [fundId], references: [id])

  shiftId Int
  shift   Shift @relation(fields: [shiftId], references: [id])

  employeeId Int
  employee   User @relation(fields: [employeeId], references: [id])

  items         InvoiceItem[]
  relatedDebtId Int? // Reference to the debt this invoice is related to
  relatedDebt   Debt?         @relation(fields: [relatedDebtId], references: [id])
  trayCount Int   @default(0)
  trayTracking  TrayTracking?

  @@map("invoices")
}

enum InvoiceType {
  income
  expense
}

enum InvoiceCategory {
  products
  direct
  debt
}

model InvoiceItem {
  id        Int   @id @default(autoincrement())
  quantity  Float
  unitPrice Float
  subTotal  Float

  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  @@map("invoice_items")
}

enum TrayStatus {
  pending
  returned
}

model TrayTracking {
  id         Int        @id @default(autoincrement())
  customerId Int
  customer   Customer   @relation(fields: [customerId], references: [id])
  totalTrays Int
  status     TrayStatus @default(pending)
  createdAt  DateTime   @default(now())
  returnedAt DateTime?
  notes      String?

  invoiceId Int     @unique
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  @@map("tray_tracking")
}

model Debt {
  id              Int        @id @default(autoincrement())
  customerId      Int
  customer        Customer   @relation(fields: [customerId], references: [id])
  totalAmount     Float // إجمالي مبلغ الدين الأصلي
  remainingAmount Float // المبلغ المتبقي
  createdAt       DateTime   @default(now())
  lastPaymentDate DateTime?
  status          DebtStatus @default(active)
  notes           String?

  relatedInvoices Invoice[]

  @@map("debts")
}

enum DebtStatus {
  active
  paid
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String   @unique
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]
  debts    Debt[]
  trays    TrayTracking[]

  @@map("customers")
}
